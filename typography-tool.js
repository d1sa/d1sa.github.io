#!/usr/bin/env node

/**
 * Typography Tool - —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏ –≤ HTML —Ñ–∞–π–ª–∞—Ö
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º —Ä—É—Å—Å–∫–æ–π —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏
 *
 * –í–µ—Ä—Å–∏—è 1.1.0 - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–≤–æ–π–Ω—ã–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏:
 * - –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö &nbsp; –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
 * - –£–ª—É—á—à–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø—Ä–µ–¥–ª–æ–≥–æ–≤ (—Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫ –∏ –ø–æ—Å–ª–µ –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è)
 * - –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç —Å–ª—É—á–∞–π–Ω—ã—Ö –¥–≤–æ–π–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤
 * - –ò—Å–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –≤–∏–¥–∞ "&nbsp; " (–Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π –ø—Ä–æ–±–µ–ª + –æ–±—ã—á–Ω—ã–π –ø—Ä–æ–±–µ–ª)
 */

const fs = require('fs');
const path = require('path');
const { JSDOM } = require('jsdom');
const { Command } = require('commander');

class TypographyProcessor {
  constructor() {
    // –ù–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π –ø—Ä–æ–±–µ–ª (Unicode: U+00A0)
    this.nbsp = '\u00A0';

    // –ü—Ä–∞–≤–∏–ª–∞ –∑–∞–º–µ–Ω—ã –æ–±—ã—á–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –Ω–∞ –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ
    this.rules = [
      // –ü—Ä–µ–¥–ª–æ–≥–∏ –∏ —Å–æ—é–∑—ã (1-3 –±—É–∫–≤—ã) - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
      {
        pattern: /(^|[\s\.,;:!?\-‚Äî])([–∞-—è—ë]{1,3})(\s)/gim,
        replacement: (match, before, word, space) => {
          const shortWords = [
            '–≤',
            '–≤–æ',
            '–Ω–∞',
            '–∑–∞',
            '–ø–æ',
            '–¥–æ',
            '–æ—Ç',
            '—Å–æ',
            '–∏–∑',
            '–∫',
            '–∫–æ',
            '–æ',
            '–æ–±',
            '–ø—Ä–∏',
            '–ø—Ä–æ',
            '–ø–æ–¥',
            '–Ω–∞–¥',
            '–±–µ–∑',
            '–¥–ª—è',
            '—á–µ—Ä–µ–∑',
            '—É',
            '—Å',
            '–∏',
            '–∞',
            '–Ω–æ',
            '–¥–∞',
            '–∏–ª–∏',
            '—á—Ç–æ',
            '–∫–∞–∫',
            '–∂–µ',
            '–ª–∏',
            '–±—ã',
            '–Ω–µ',
            '–Ω–∏',
            '—Ç–æ',
            '—Ç—É',
            '—Ç–µ',
            '—Ç–∞',
          ];
          if (shortWords.includes(word.toLowerCase())) {
            // –ó–∞–º–µ–Ω—è–µ–º: before + word + –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–π –ø—Ä–æ–±–µ–ª
            return `${before}${word}${this.nbsp}`;
          }
          return match;
        },
      },

      // –ó–Ω–∞–∫ —Ä—É–±–ª—è –∏ –¥—Ä—É–≥–∏–µ –≤–∞–ª—é—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
      {
        pattern: /(\d+)\s*(—Ä—É–±\.?|—Ä—É–±–ª–µ–π?|—Ä—É–±–ª—è?|‚ÇΩ)/gi,
        replacement: `$1${this.nbsp}$2`,
      },

      // –ï–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
      {
        pattern: /(\d+)\s*(–º|–∫–º|—Å–º|–º–º|–∫–≥|–≥|—Ç|–ª|–º–ª|—à—Ç\.?|—à—Ç—É–∫?|—à—Ç—É–∫–∏?)/gi,
        replacement: `$1${this.nbsp}$2`,
      },

      // –î–∞—Ç—ã —Å –≥–æ–¥–æ–º
      {
        pattern:
          /(\d{1,2})\s+(—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è)\s+(\d{4})/gi,
        replacement: `$1${this.nbsp}$2${this.nbsp}$3`,
      },

      // –í—Ä–µ–º—è
      {
        pattern:
          /(\d{1,2})\s*(—á\.?|—á–∞—Å\.?|—á–∞—Å–æ–≤?|–º–∏–Ω\.?|–º–∏–Ω—É—Ç?|—Å–µ–∫\.?|—Å–µ–∫—É–Ω–¥?)/gi,
        replacement: `$1${this.nbsp}$2`,
      },

      // –ü—Ä–æ—Ü–µ–Ω—Ç—ã
      {
        pattern: /(\d+)\s*(%|–ø—Ä–æ—Ü–µ–Ω—Ç[–∞-—è]*)/gi,
        replacement: `$1${this.nbsp}$2`,
      },

      // –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ (–∑–∞—â–∏—Ç–∞ –æ—Ç —Ä–∞–∑—Ä—ã–≤–∞)
      {
        pattern: /(\+7|8)\s*(\d{3})\s*(\d{3})\s*(\d{2})\s*(\d{2})/g,
        replacement: `$1${this.nbsp}$2${this.nbsp}$3-$4-$5`,
      },

      // –ò–Ω–∏—Ü–∏–∞–ª—ã
      {
        pattern: /([–ê-–Ø–Å]\.)\s*([–ê-–Ø–Å]\.)\s*([–ê-–Ø–Å][–∞-—è—ë]+)/g,
        replacement: `$1${this.nbsp}$2${this.nbsp}$3`,
      },

      // –°–æ–∫—Ä–∞—â–µ–Ω–∏—è
      {
        pattern: /(\d+)\s*(–∫–≤\.–º|–º¬≤|–º2)/gi,
        replacement: `$1${this.nbsp}$2`,
      },

      // "–¥–æ" –∏ "–æ—Ç" —Å —á–∏—Å–ª–∞–º–∏
      {
        pattern: /(–¥–æ|–æ—Ç)\s+(\d+)/gi,
        replacement: `$1${this.nbsp}$2`,
      },

      // "—Å" –∏ "–ø–æ" —Å –¥–∞—Ç–∞–º–∏/—á–∏—Å–ª–∞–º–∏
      {
        pattern: /(—Å|–ø–æ)\s+(\d+)/gi,
        replacement: `$1${this.nbsp}$2`,
      },
    ];
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∞–≤–∏–ª–∞–º —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏
   * @param {string} text - –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
   * @returns {string} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
   */
  processText(text) {
    let processedText = text;

    // –°–Ω–∞—á–∞–ª–∞ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã: —É–±–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ &nbsp; –∏ –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –æ–±—ã—á–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã
    processedText = processedText.replace(/\u00A0/g, ' ');

    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ)
    processedText = processedText.replace(/\s+/g, ' ');

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    this.rules.forEach(rule => {
      if (typeof rule.replacement === 'function') {
        processedText = processedText.replace(
          rule.pattern,
          rule.replacement.bind(this)
        );
      } else {
        processedText = processedText.replace(rule.pattern, rule.replacement);
      }
    });

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞: —É–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –º–µ–∂–¥—É nbsp –∏ –æ–±—ã—á–Ω—ã–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏
    processedText = processedText.replace(/\u00A0\s+/g, this.nbsp);
    processedText = processedText.replace(/\s+\u00A0/g, this.nbsp);

    return processedText;
  }

  /**
   * –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —É–∑–ª—ã –≤ DOM —ç–ª–µ–º–µ–Ω—Ç–µ
   * @param {Element} element - DOM —ç–ª–µ–º–µ–Ω—Ç
   */
  processElement(element) {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è
    const skipTags = ['SCRIPT', 'STYLE', 'TEXTAREA', 'INPUT', 'CODE', 'PRE'];

    if (skipTags.includes(element.tagName)) {
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ —É–∑–ª—ã
    for (let child of element.childNodes) {
      if (child.nodeType === 3) {
        // TEXT_NODE
        const originalText = child.textContent;
        const processedText = this.processText(originalText);

        if (originalText !== processedText) {
          child.textContent = processedText;
        }
      } else if (child.nodeType === 1) {
        // ELEMENT_NODE
        this.processElement(child);
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTML —Ñ–∞–π–ª
   * @param {string} filePath - –ø—É—Ç—å –∫ HTML —Ñ–∞–π–ª—É
   * @returns {Promise<Object>} —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  async processFile(filePath) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
      if (!fs.existsSync(filePath)) {
        throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
      }

      // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
      const html = fs.readFileSync(filePath, 'utf8');
      console.log(`üìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ${filePath}`);

      // –°–æ–∑–¥–∞–µ–º DOM
      const dom = new JSDOM(html);
      const document = dom.window.document;

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      let changesCount = 0;
      const originalTexts = [];
      const processedTexts = [];

      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —É–∑–ª—ã –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
      this.collectTextNodes(document.body, originalTexts);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º document.body
      this.processElement(document.body);

      // –°–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
      this.collectTextNodes(document.body, processedTexts);

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
      for (
        let i = 0;
        i < Math.min(originalTexts.length, processedTexts.length);
        i++
      ) {
        if (originalTexts[i] !== processedTexts[i]) {
          changesCount++;
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π HTML
      const updatedHtml = dom.serialize();

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
      fs.writeFileSync(filePath, updatedHtml, 'utf8');

      return {
        success: true,
        filePath,
        changesCount,
        message: `‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–Ω–µ—Å–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${changesCount}`,
      };
    } catch (error) {
      return {
        success: false,
        filePath,
        error: error.message,
        message: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: ${error.message}`,
      };
    }
  }

  /**
   * –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —É–∑–ª—ã –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞
   * @param {Element} element - DOM —ç–ª–µ–º–µ–Ω—Ç
   * @param {Array} textArray - –º–∞—Å—Å–∏–≤ –¥–ª—è —Å–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–æ–≤
   */
  collectTextNodes(element, textArray) {
    const skipTags = ['SCRIPT', 'STYLE', 'TEXTAREA', 'INPUT', 'CODE', 'PRE'];

    if (skipTags.includes(element.tagName)) {
      return;
    }

    for (let child of element.childNodes) {
      if (child.nodeType === 3) {
        // TEXT_NODE
        textArray.push(child.textContent);
      } else if (child.nodeType === 1) {
        // ELEMENT_NODE
        this.collectTextNodes(child, textArray);
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
   * @param {Array<string>} filePaths - –º–∞—Å—Å–∏–≤ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
   * @returns {Promise<Array>} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
   */
  async processFiles(filePaths) {
    const results = [];

    for (const filePath of filePaths) {
      const result = await this.processFile(filePath);
      results.push(result);
      console.log(result.message);
    }

    return results;
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
const program = new Command();

program
  .name('typography-tool')
  .description('–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏ –≤ HTML —Ñ–∞–π–ª–∞—Ö')
  .version('1.0.0');

program
  .argument('<files...>', 'HTML —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
  .option('-v, --verbose', '–ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥')
  .action(async (files, options) => {
    const processor = new TypographyProcessor();

    console.log('üîß –ó–∞–ø—É—Å–∫ —É—Ç–∏–ª–∏—Ç—ã —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏...\n');

    if (options.verbose) {
      console.log(`üìã –§–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${files.join(', ')}`);
      console.log('');
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    const results = await processor.processFiles(files);

    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const successful = results.filter(r => r.success).length;
    const failed = results.filter(r => !r.success).length;
    const totalChanges = results.reduce(
      (sum, r) => sum + (r.changesCount || 0),
      0
    );

    console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${successful} —Ñ–∞–π–ª(–æ–≤)`);
    console.log(`‚ùå –û—à–∏–±–æ–∫: ${failed}`);
    console.log(`üîÑ –í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${totalChanges}`);

    if (failed > 0) {
      process.exit(1);
    }
  });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ —Ñ–∞–π–ª—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã
if (process.argv.length < 3) {
  console.log('‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: npm run typography <—Ñ–∞–π–ª—ã>');
  console.log('üìù –ü—Ä–∏–º–µ—Ä: npm run typography src/index.html');
  console.log('üìù –ü—Ä–∏–º–µ—Ä: npm run typography src/*.html');
  process.exit(1);
}

program.parse();
