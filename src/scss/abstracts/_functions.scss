// ==========================================================================
// Functions
// ==========================================================================

// Convert px to rem
// ==========================================================================
@function rem($pixels, $context: 16px) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }
  @if (unitless($context)) {
    $context: $context * 1px;
  }
  @return calc($pixels / $context) * 1rem;
}

// Convert px to em
// ==========================================================================
@function em($pixels, $context: 16px) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }
  @if (unitless($context)) {
    $context: $context * 1px;
  }
  @return calc($pixels / $context) * 1em;
}

// Get color with opacity
// ==========================================================================
@function color-alpha($color, $alpha) {
  @return rgba($color, $alpha);
}

// Strip unit from number
// ==========================================================================
@function strip-unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return calc($number / ($number * 0 + 1));
  }
  @return $number;
}

// Calculate fluid typography
// ==========================================================================
@function fluid-type(
  $min-size,
  $max-size,
  $min-width: 320px,
  $max-width: 1200px
) {
  $min-size-unitless: strip-unit($min-size);
  $max-size-unitless: strip-unit($max-size);
  $min-width-unitless: strip-unit($min-width);
  $max-width-unitless: strip-unit($max-width);

  $slope: calc(
    ($max-size-unitless - $min-size-unitless) /
      ($max-width-unitless - $min-width-unitless)
  );
  $intercept: calc($min-size-unitless - $slope * $min-width-unitless);

  @return clamp(
    #{$min-size},
    #{$intercept}px + #{$slope * 100}vw,
    #{$max-size}
  );
}
